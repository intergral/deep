//   Copyright (C) 2023  Intergral GmbH
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU Affero General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU Affero General Public License for more details.
//
//   You should have received a copy of the GNU Affero General Public License
//   along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: tracepoint/v1/tracepoint.proto

package v1

import (
	v1 "github.com/intergral/deep/pkg/deeppb/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The types of metric to create
type MetricType int32

const (
	MetricType_COUNTER   MetricType = 0
	MetricType_GAUGE     MetricType = 1
	MetricType_HISTOGRAM MetricType = 2
	MetricType_SUMMARY   MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "COUNTER",
		1: "GAUGE",
		2: "HISTOGRAM",
		3: "SUMMARY",
	}
	MetricType_value = map[string]int32{
		"COUNTER":   0,
		"GAUGE":     1,
		"HISTOGRAM": 2,
		"SUMMARY":   3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_tracepoint_v1_tracepoint_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_tracepoint_v1_tracepoint_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{0}
}

// WatchSource is the logical source of the watch expression used to generate a result.
type WatchSource int32

const (
	WatchSource_WATCH   WatchSource = 0 // A user attached this as an expression
	WatchSource_LOG     WatchSource = 1 // A watch expression from a log
	WatchSource_METRIC  WatchSource = 2 // A watch expression from a metric value or tag
	WatchSource_CAPTURE WatchSource = 3 // A watch expression generated from a capture: e.g. thrown, return, duration
)

// Enum value maps for WatchSource.
var (
	WatchSource_name = map[int32]string{
		0: "WATCH",
		1: "LOG",
		2: "METRIC",
		3: "CAPTURE",
	}
	WatchSource_value = map[string]int32{
		"WATCH":   0,
		"LOG":     1,
		"METRIC":  2,
		"CAPTURE": 3,
	}
)

func (x WatchSource) Enum() *WatchSource {
	p := new(WatchSource)
	*p = x
	return p
}

func (x WatchSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchSource) Descriptor() protoreflect.EnumDescriptor {
	return file_tracepoint_v1_tracepoint_proto_enumTypes[1].Descriptor()
}

func (WatchSource) Type() protoreflect.EnumType {
	return &file_tracepoint_v1_tracepoint_proto_enumTypes[1]
}

func (x WatchSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchSource.Descriptor instead.
func (WatchSource) EnumDescriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{1}
}

// This is the config of a tracepoint that should be installed by the application agent.
type TracePointConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                                             // The ID of the config
	Path       string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                                                                         // The path for the file to install in
	LineNumber uint32            `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`                                                          // The line number to install on
	Args       map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Arbitrary key/kay of config values (this can contain conditions, logs, fire counts etc)
	Watches    []string          `protobuf:"bytes,5,rep,name=watches,proto3" json:"watches,omitempty"`                                                                                   // Expressions to evaluate at the this point of the code
	Targeting  []*v1.KeyValue    `protobuf:"bytes,6,rep,name=targeting,proto3" json:"targeting,omitempty"`                                                                               // The targeting config for this tracepoint, used by the server to filter response.
	Metrics    []*Metric         `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty"`                                                                                   // List of metric rules to apply at this point in the code
}

func (x *TracePointConfig) Reset() {
	*x = TracePointConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracePointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePointConfig) ProtoMessage() {}

func (x *TracePointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePointConfig.ProtoReflect.Descriptor instead.
func (*TracePointConfig) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{0}
}

func (x *TracePointConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TracePointConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TracePointConfig) GetLineNumber() uint32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *TracePointConfig) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TracePointConfig) GetWatches() []string {
	if x != nil {
		return x.Watches
	}
	return nil
}

func (x *TracePointConfig) GetTargeting() []*v1.KeyValue {
	if x != nil {
		return x.Targeting
	}
	return nil
}

func (x *TracePointConfig) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Metric describes a metric rule to apply at this point.
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                       // The name of the metric
	LabelExpressions []*LabelExpression `protobuf:"bytes,2,rep,name=labelExpressions,proto3" json:"labelExpressions,omitempty"`               // The metric labels
	Type             MetricType         `protobuf:"varint,3,opt,name=type,proto3,enum=deeppb.tracepoint.v1.MetricType" json:"type,omitempty"` // The type of metric to generate
	Expression       *string            `protobuf:"bytes,4,opt,name=expression,proto3,oneof" json:"expression,omitempty"`                     // The result of this expression will become the metric value.
	Namespace        *string            `protobuf:"bytes,5,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`                       // The namespace to set on the metric
	Help             *string            `protobuf:"bytes,6,opt,name=help,proto3,oneof" json:"help,omitempty"`                                 // The help statement to attach to the metric
	Unit             *string            `protobuf:"bytes,7,opt,name=unit,proto3,oneof" json:"unit,omitempty"`                                 // The unit associated with this value
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{1}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetLabelExpressions() []*LabelExpression {
	if x != nil {
		return x.LabelExpressions
	}
	return nil
}

func (x *Metric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_COUNTER
}

func (x *Metric) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *Metric) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *Metric) GetHelp() string {
	if x != nil && x.Help != nil {
		return *x.Help
	}
	return ""
}

func (x *Metric) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

// LabelExpression describes a label that should be evaluated and the value used as the label
type LabelExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // The label key
	// Types that are assignable to Value:
	//	*LabelExpression_Static
	//	*LabelExpression_Expression
	Value isLabelExpression_Value `protobuf_oneof:"value"`
}

func (x *LabelExpression) Reset() {
	*x = LabelExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelExpression) ProtoMessage() {}

func (x *LabelExpression) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelExpression.ProtoReflect.Descriptor instead.
func (*LabelExpression) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{2}
}

func (x *LabelExpression) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *LabelExpression) GetValue() isLabelExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LabelExpression) GetStatic() *v1.AnyValue {
	if x, ok := x.GetValue().(*LabelExpression_Static); ok {
		return x.Static
	}
	return nil
}

func (x *LabelExpression) GetExpression() string {
	if x, ok := x.GetValue().(*LabelExpression_Expression); ok {
		return x.Expression
	}
	return ""
}

type isLabelExpression_Value interface {
	isLabelExpression_Value()
}

type LabelExpression_Static struct {
	Static *v1.AnyValue `protobuf:"bytes,2,opt,name=static,proto3,oneof"` // The label value
}

type LabelExpression_Expression struct {
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3,oneof"` // The label expression
}

func (*LabelExpression_Static) isLabelExpression_Value() {}

func (*LabelExpression_Expression) isLabelExpression_Value() {}

// VariableID is used to identify a variable on a stack frame or as a child of another variable.
type VariableID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                               // The ID to use to look up in the snapshot 'var_lookup'
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // The name of the variable at the point this ID is referenced.
	Modifiers    []string `protobuf:"bytes,3,rep,name=modifiers,proto3" json:"modifiers,omitempty"`                                 // The modifiers (private, static etc) at the point this ID is referenced
	OriginalName *string  `protobuf:"bytes,4,opt,name=original_name,json=originalName,proto3,oneof" json:"original_name,omitempty"` // The unmodified name from the engine, some times a variable is renamed by the compiler, e.g. in python a field called '__someVar' is renamed for runtime to 'Class__someVar'.
}

func (x *VariableID) Reset() {
	*x = VariableID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableID) ProtoMessage() {}

func (x *VariableID) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableID.ProtoReflect.Descriptor instead.
func (*VariableID) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{3}
}

func (x *VariableID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VariableID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableID) GetModifiers() []string {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *VariableID) GetOriginalName() string {
	if x != nil && x.OriginalName != nil {
		return *x.OriginalName
	}
	return ""
}

// Variable is the description of am actual value, that is referenced by a VariableID
type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                  // The type/class of the variable (e.g string)
	Value     string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                // The value of the variable as a string. All values are converted to string for simplicity. This can also result in the value being truncated if it is a very large string. Collection types should not be to stringed, instead a summary should be given as the value 'HashSet of size: 10'.
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`                  // This should be the object identity, and not the hashcode of the object. Use object hashcode if other info is not available.
	Children  []*VariableID `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`          // This is a list of the any variables that this variable references. To reduce duplication we use var_lookup to store and process variables by reference.
	Truncated *bool         `protobuf:"varint,5,opt,name=truncated,proto3,oneof" json:"truncated,omitempty"` // True if the value has been truncated
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{4}
}

func (x *Variable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Variable) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Variable) GetChildren() []*VariableID {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Variable) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

// StackFrame is the description of a executing code frame that has been captured by the tracepoint.
type StackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName               string        `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`                                                    // This is the full path of the file where the line of code is paused.
	MethodName             string        `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`                                              // This is the method or function name that is being called.
	LineNumber             uint32        `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`                                             // This is the line number where the program is paused.
	ClassName              *string       `protobuf:"bytes,4,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`                                           // The class name of where the method is defined
	IsAsync                *bool         `protobuf:"varint,5,opt,name=is_async,json=isAsync,proto3,oneof" json:"is_async,omitempty"`                                                // This indicates that the frame is an async frame
	ColumnNumber           *uint32       `protobuf:"varint,6,opt,name=column_number,json=columnNumber,proto3,oneof" json:"column_number,omitempty"`                                 // This is the column number for the line, primarily used in node.
	TranspiledFileName     *string       `protobuf:"bytes,7,opt,name=transpiled_file_name,json=transpiledFileName,proto3,oneof" json:"transpiled_file_name,omitempty"`              // The name of the transpiled file. If we have mappings available we can map the file 'something.js' to the original typescript. This will be the transpiled file name e.g. something.js
	TranspiledLineNumber   *uint32       `protobuf:"varint,8,opt,name=transpiled_line_number,json=transpiledLineNumber,proto3,oneof" json:"transpiled_line_number,omitempty"`       // The transpiled line number
	TranspiledColumnNumber *uint32       `protobuf:"varint,9,opt,name=transpiled_column_number,json=transpiledColumnNumber,proto3,oneof" json:"transpiled_column_number,omitempty"` // The transpiled column number
	Variables              []*VariableID `protobuf:"bytes,10,rep,name=variables,proto3" json:"variables,omitempty"`                                                                 // This is the list of variables (using var ids) that are present at this point in the code.
	AppFrame               *bool         `protobuf:"varint,11,opt,name=app_frame,json=appFrame,proto3,oneof" json:"app_frame,omitempty"`                                            // This indicates if the frame is from inside the app, or is from a library
	NativeFrame            *bool         `protobuf:"varint,12,opt,name=native_frame,json=nativeFrame,proto3,oneof" json:"native_frame,omitempty"`                                   // This indicates if the frame, from a native library (primarily used in Java)
	ShortPath              *string       `protobuf:"bytes,13,opt,name=short_path,json=shortPath,proto3,oneof" json:"short_path,omitempty"`                                          // This is the short path to the file (e.g. /simple-app/main.py instead of /home/ben/repo/app/simple-app/main.py).
}

func (x *StackFrame) Reset() {
	*x = StackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFrame) ProtoMessage() {}

func (x *StackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackFrame.ProtoReflect.Descriptor instead.
func (*StackFrame) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{5}
}

func (x *StackFrame) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StackFrame) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *StackFrame) GetLineNumber() uint32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *StackFrame) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *StackFrame) GetIsAsync() bool {
	if x != nil && x.IsAsync != nil {
		return *x.IsAsync
	}
	return false
}

func (x *StackFrame) GetColumnNumber() uint32 {
	if x != nil && x.ColumnNumber != nil {
		return *x.ColumnNumber
	}
	return 0
}

func (x *StackFrame) GetTranspiledFileName() string {
	if x != nil && x.TranspiledFileName != nil {
		return *x.TranspiledFileName
	}
	return ""
}

func (x *StackFrame) GetTranspiledLineNumber() uint32 {
	if x != nil && x.TranspiledLineNumber != nil {
		return *x.TranspiledLineNumber
	}
	return 0
}

func (x *StackFrame) GetTranspiledColumnNumber() uint32 {
	if x != nil && x.TranspiledColumnNumber != nil {
		return *x.TranspiledColumnNumber
	}
	return 0
}

func (x *StackFrame) GetVariables() []*VariableID {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *StackFrame) GetAppFrame() bool {
	if x != nil && x.AppFrame != nil {
		return *x.AppFrame
	}
	return false
}

func (x *StackFrame) GetNativeFrame() bool {
	if x != nil && x.NativeFrame != nil {
		return *x.NativeFrame
	}
	return false
}

func (x *StackFrame) GetShortPath() string {
	if x != nil && x.ShortPath != nil {
		return *x.ShortPath
	}
	return ""
}

// WatchResult is the result of a watch expression being executed.
type WatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"` // the expression executed to collect the data
	// Types that are assignable to Result:
	//	*WatchResult_GoodResult
	//	*WatchResult_ErrorResult
	Result     isWatchResult_Result `protobuf_oneof:"result"`
	FromMetric *bool                `protobuf:"varint,4,opt,name=from_metric,json=fromMetric,proto3,oneof" json:"from_metric,omitempty"`       // Is this the result of a metric, or metric tag @Deprecated
	Source     WatchSource          `protobuf:"varint,5,opt,name=source,proto3,enum=deeppb.tracepoint.v1.WatchSource" json:"source,omitempty"` // This is the source of the watch result. e.g. did the watch come from a watch input, a log message or a metric
}

func (x *WatchResult) Reset() {
	*x = WatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResult) ProtoMessage() {}

func (x *WatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResult.ProtoReflect.Descriptor instead.
func (*WatchResult) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{6}
}

func (x *WatchResult) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (m *WatchResult) GetResult() isWatchResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *WatchResult) GetGoodResult() *VariableID {
	if x, ok := x.GetResult().(*WatchResult_GoodResult); ok {
		return x.GoodResult
	}
	return nil
}

func (x *WatchResult) GetErrorResult() string {
	if x, ok := x.GetResult().(*WatchResult_ErrorResult); ok {
		return x.ErrorResult
	}
	return ""
}

func (x *WatchResult) GetFromMetric() bool {
	if x != nil && x.FromMetric != nil {
		return *x.FromMetric
	}
	return false
}

func (x *WatchResult) GetSource() WatchSource {
	if x != nil {
		return x.Source
	}
	return WatchSource_WATCH
}

type isWatchResult_Result interface {
	isWatchResult_Result()
}

type WatchResult_GoodResult struct {
	GoodResult *VariableID `protobuf:"bytes,2,opt,name=good_result,json=goodResult,proto3,oneof"` // The VariableID of the variable that represents the result, if the expression completed successfully.
}

type WatchResult_ErrorResult struct {
	ErrorResult string `protobuf:"bytes,3,opt,name=error_result,json=errorResult,proto3,oneof"` // This is to contain the error message generated if the watch expression fails.
}

func (*WatchResult_GoodResult) isWatchResult_Result() {}

func (*WatchResult_ErrorResult) isWatchResult_Result() {}

// Snapshot is the result of a tracepoint being executed.
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            []byte               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                                                                        // The client generated ID for this snapshot
	Tracepoint    *TracePointConfig    `protobuf:"bytes,2,opt,name=tracepoint,proto3" json:"tracepoint,omitempty"`                                                                                                        // The config that was used to generate this snapshot (it could be deleted by the time we look at the data)
	VarLookup     map[string]*Variable `protobuf:"bytes,3,rep,name=var_lookup,json=varLookup,proto3" json:"var_lookup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // This is a flat list of all the collected variables for this snapshot, to reduce data size we dereference as much as we can
	TsNanos       uint64               `protobuf:"fixed64,4,opt,name=ts_nanos,json=tsNanos,proto3" json:"ts_nanos,omitempty"`                                                                                             // The time in nanos since 1970 when this snapshot was generated
	Frames        []*StackFrame        `protobuf:"bytes,5,rep,name=frames,proto3" json:"frames,omitempty"`                                                                                                                // The active frames at the time the snapshot is generated
	Watches       []*WatchResult       `protobuf:"bytes,6,rep,name=watches,proto3" json:"watches,omitempty"`                                                                                                              // The watches results
	Attributes    []*v1.KeyValue       `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty"`                                                                                                        // The attributes for this snapshot (e.g file_name or line_no)
	DurationNanos uint64               `protobuf:"varint,8,opt,name=duration_nanos,json=durationNanos,proto3" json:"duration_nanos,omitempty"`                                                                            // The time in nano seconds it took to collect the data
	Resource      []*v1.KeyValue       `protobuf:"bytes,9,rep,name=resource,proto3" json:"resource,omitempty"`                                                                                                            // The resource for this client, should match the resource sent with a PollRequest.
	LogMsg        *string              `protobuf:"bytes,10,opt,name=log_msg,json=logMsg,proto3,oneof" json:"log_msg,omitempty"`                                                                                           // The processed log message if the tracepoint had a log message configured.
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{7}
}

func (x *Snapshot) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Snapshot) GetTracepoint() *TracePointConfig {
	if x != nil {
		return x.Tracepoint
	}
	return nil
}

func (x *Snapshot) GetVarLookup() map[string]*Variable {
	if x != nil {
		return x.VarLookup
	}
	return nil
}

func (x *Snapshot) GetTsNanos() uint64 {
	if x != nil {
		return x.TsNanos
	}
	return 0
}

func (x *Snapshot) GetFrames() []*StackFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Snapshot) GetWatches() []*WatchResult {
	if x != nil {
		return x.Watches
	}
	return nil
}

func (x *Snapshot) GetAttributes() []*v1.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Snapshot) GetDurationNanos() uint64 {
	if x != nil {
		return x.DurationNanos
	}
	return 0
}

func (x *Snapshot) GetResource() []*v1.KeyValue {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Snapshot) GetLogMsg() string {
	if x != nil && x.LogMsg != nil {
		return *x.LogMsg
	}
	return ""
}

// SnapshotResponse this is the response from the server, when it receives a Snapshot
type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tracepoint_v1_tracepoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{8}
}

var File_tracepoint_v1_tracepoint_proto protoreflect.FileDescriptor

var file_tracepoint_v1_tracepoint_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2,
	0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x70, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xce, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x70, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x12, 0x20, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0a,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xe5, 0x05, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x08, 0x61, 0x70, 0x70, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x92, 0x02, 0x0a, 0x0b, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22,
	0xe5, 0x04, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70,
	0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74, 0x73, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70,
	0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x70, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x5c, 0x0a,
	0x0e, 0x56, 0x61, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x40, 0x0a, 0x0a, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x2a, 0x3a, 0x0a,
	0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x32, 0x63, 0x0a, 0x0f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e,
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x67, 0x72, 0x61, 0x6c, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x67, 0x72, 0x61, 0x6c,
	0x2f, 0x64, 0x65, 0x65, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x70, 0x62,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tracepoint_v1_tracepoint_proto_rawDescOnce sync.Once
	file_tracepoint_v1_tracepoint_proto_rawDescData = file_tracepoint_v1_tracepoint_proto_rawDesc
)

func file_tracepoint_v1_tracepoint_proto_rawDescGZIP() []byte {
	file_tracepoint_v1_tracepoint_proto_rawDescOnce.Do(func() {
		file_tracepoint_v1_tracepoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_tracepoint_v1_tracepoint_proto_rawDescData)
	})
	return file_tracepoint_v1_tracepoint_proto_rawDescData
}

var file_tracepoint_v1_tracepoint_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tracepoint_v1_tracepoint_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tracepoint_v1_tracepoint_proto_goTypes = []interface{}{
	(MetricType)(0),          // 0: deeppb.tracepoint.v1.MetricType
	(WatchSource)(0),         // 1: deeppb.tracepoint.v1.WatchSource
	(*TracePointConfig)(nil), // 2: deeppb.tracepoint.v1.TracePointConfig
	(*Metric)(nil),           // 3: deeppb.tracepoint.v1.Metric
	(*LabelExpression)(nil),  // 4: deeppb.tracepoint.v1.LabelExpression
	(*VariableID)(nil),       // 5: deeppb.tracepoint.v1.VariableID
	(*Variable)(nil),         // 6: deeppb.tracepoint.v1.Variable
	(*StackFrame)(nil),       // 7: deeppb.tracepoint.v1.StackFrame
	(*WatchResult)(nil),      // 8: deeppb.tracepoint.v1.WatchResult
	(*Snapshot)(nil),         // 9: deeppb.tracepoint.v1.Snapshot
	(*SnapshotResponse)(nil), // 10: deeppb.tracepoint.v1.SnapshotResponse
	nil,                      // 11: deeppb.tracepoint.v1.TracePointConfig.ArgsEntry
	nil,                      // 12: deeppb.tracepoint.v1.Snapshot.VarLookupEntry
	(*v1.KeyValue)(nil),      // 13: deeppb.common.v1.KeyValue
	(*v1.AnyValue)(nil),      // 14: deeppb.common.v1.AnyValue
}
var file_tracepoint_v1_tracepoint_proto_depIdxs = []int32{
	11, // 0: deeppb.tracepoint.v1.TracePointConfig.args:type_name -> deeppb.tracepoint.v1.TracePointConfig.ArgsEntry
	13, // 1: deeppb.tracepoint.v1.TracePointConfig.targeting:type_name -> deeppb.common.v1.KeyValue
	3,  // 2: deeppb.tracepoint.v1.TracePointConfig.metrics:type_name -> deeppb.tracepoint.v1.Metric
	4,  // 3: deeppb.tracepoint.v1.Metric.labelExpressions:type_name -> deeppb.tracepoint.v1.LabelExpression
	0,  // 4: deeppb.tracepoint.v1.Metric.type:type_name -> deeppb.tracepoint.v1.MetricType
	14, // 5: deeppb.tracepoint.v1.LabelExpression.static:type_name -> deeppb.common.v1.AnyValue
	5,  // 6: deeppb.tracepoint.v1.Variable.children:type_name -> deeppb.tracepoint.v1.VariableID
	5,  // 7: deeppb.tracepoint.v1.StackFrame.variables:type_name -> deeppb.tracepoint.v1.VariableID
	5,  // 8: deeppb.tracepoint.v1.WatchResult.good_result:type_name -> deeppb.tracepoint.v1.VariableID
	1,  // 9: deeppb.tracepoint.v1.WatchResult.source:type_name -> deeppb.tracepoint.v1.WatchSource
	2,  // 10: deeppb.tracepoint.v1.Snapshot.tracepoint:type_name -> deeppb.tracepoint.v1.TracePointConfig
	12, // 11: deeppb.tracepoint.v1.Snapshot.var_lookup:type_name -> deeppb.tracepoint.v1.Snapshot.VarLookupEntry
	7,  // 12: deeppb.tracepoint.v1.Snapshot.frames:type_name -> deeppb.tracepoint.v1.StackFrame
	8,  // 13: deeppb.tracepoint.v1.Snapshot.watches:type_name -> deeppb.tracepoint.v1.WatchResult
	13, // 14: deeppb.tracepoint.v1.Snapshot.attributes:type_name -> deeppb.common.v1.KeyValue
	13, // 15: deeppb.tracepoint.v1.Snapshot.resource:type_name -> deeppb.common.v1.KeyValue
	6,  // 16: deeppb.tracepoint.v1.Snapshot.VarLookupEntry.value:type_name -> deeppb.tracepoint.v1.Variable
	9,  // 17: deeppb.tracepoint.v1.SnapshotService.send:input_type -> deeppb.tracepoint.v1.Snapshot
	10, // 18: deeppb.tracepoint.v1.SnapshotService.send:output_type -> deeppb.tracepoint.v1.SnapshotResponse
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_tracepoint_v1_tracepoint_proto_init() }
func file_tracepoint_v1_tracepoint_proto_init() {
	if File_tracepoint_v1_tracepoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tracepoint_v1_tracepoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracePointConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracepoint_v1_tracepoint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tracepoint_v1_tracepoint_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tracepoint_v1_tracepoint_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*LabelExpression_Static)(nil),
		(*LabelExpression_Expression)(nil),
	}
	file_tracepoint_v1_tracepoint_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_tracepoint_v1_tracepoint_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_tracepoint_v1_tracepoint_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_tracepoint_v1_tracepoint_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*WatchResult_GoodResult)(nil),
		(*WatchResult_ErrorResult)(nil),
	}
	file_tracepoint_v1_tracepoint_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracepoint_v1_tracepoint_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tracepoint_v1_tracepoint_proto_goTypes,
		DependencyIndexes: file_tracepoint_v1_tracepoint_proto_depIdxs,
		EnumInfos:         file_tracepoint_v1_tracepoint_proto_enumTypes,
		MessageInfos:      file_tracepoint_v1_tracepoint_proto_msgTypes,
	}.Build()
	File_tracepoint_v1_tracepoint_proto = out.File
	file_tracepoint_v1_tracepoint_proto_rawDesc = nil
	file_tracepoint_v1_tracepoint_proto_goTypes = nil
	file_tracepoint_v1_tracepoint_proto_depIdxs = nil
}
