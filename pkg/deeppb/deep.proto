/*
 * Copyright (C) 2023  Intergral GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
syntax = "proto3";
// We import tracepoint and poll from the public deep proto that is used by the agents
// we modify these via the build
import "tracepoint/v1/tracepoint.proto";
import "poll/v1/poll.proto";

package deeppb;

option go_package = "github.com/intergral/deep/pkg/deeppb";


service QuerierService {
  rpc FindSnapshotByID(SnapshotByIDRequest) returns (SnapshotByIDResponse) {};
  rpc SearchRecent(SearchRequest) returns (SearchResponse) {};
  rpc SearchBlock(SearchBlockRequest) returns (SearchResponse) {};
  rpc SearchTags(SearchTagsRequest) returns (SearchTagsResponse) {};
  rpc SearchTagValues(SearchTagValuesRequest) returns (SearchTagValuesResponse) {};
  rpc SearchTagValuesV2(SearchTagValuesRequest) returns (SearchTagValuesV2Response) {};
}

message SearchRequest {
  // case insensitive partial match
  map<string, string> Tags = 1;
  uint32 MinDurationMs = 2;
  uint32 MaxDurationMs = 3;
  uint32 Limit = 4;
  uint32 start = 5;
  uint32 end = 6;
  // DeepQL query
  string Query = 8;
}

// SearchBlockRequest takes SearchRequest parameters as well as all information necessary
// to search a block in the backend.
message SearchBlockRequest {
  SearchRequest searchReq = 1;
  string blockID = 2;
  uint32 startPage = 3;
  uint32 pagesToSearch = 4;
  string encoding = 5;
  uint32 indexPageSize = 6;
  uint32 totalRecords = 7;
  string dataEncoding = 8;
  string version = 9;
  uint64 size = 10; // total size of data file
  uint32 footerSize = 11; // size of file footer (parquet)
}

message SearchResponse {
  repeated SnapshotSearchMetadata snapshots = 1;
  SearchMetrics metrics = 2;
}

message SnapshotSearchMetadata {
  string snapshotID = 1;
  string serviceName = 2;
  string filePath = 3;
  uint32 lineNo = 4;
  uint64 startTimeUnixNano = 5;
  uint64 durationNano = 6;
}

message SearchMetrics {
  uint32 inspectedSnapshots = 1;
  uint64 inspectedBytes = 2;
  uint32 inspectedBlocks = 3;
  uint32 skippedBlocks = 4;
  uint32 skippedSnapshots = 5;
  uint64 totalBlockBytes = 6;
}

message SearchTagsRequest {
}

message SearchTagsResponse {
  repeated string tagNames = 1;
}

message SearchTagValuesRequest {
  string tagName = 1;
}

message SearchTagValuesResponse {
  repeated string tagValues = 1;
}

message TagValue {
  string type = 1;
  string value = 2;
}

message SearchTagValuesV2Response {
  repeated TagValue tagValues = 1;
}

message SnapshotByIDRequest {
  bytes ID = 1;
  string blockStart = 2;
  string blockEnd = 3;
  string queryMode = 5;
}

message SnapshotByIDResponse {
  deeppb.tracepoint.v1.Snapshot snapshot = 1;
  SnapshotByIDMetrics metrics = 2;
}

message SnapshotByIDMetrics {
  uint32 failedBlocks = 1;
}

service MetricsGenerator {
  rpc PushSnapshot(PushSnapshotRequest) returns (PushSnapshotResponse) {};
}

message PushSnapshotRequest {
  deeppb.tracepoint.v1.Snapshot snapshot = 1;
}

// Write
message PushSnapshotResponse {
}


service IngesterService {
  rpc PushBytes(PushBytesRequest) returns (PushBytesResponse) {};
}

message PushBytesRequest {
  bytes snapshot = 1;
  bytes ID = 2;
}

message PushBytesResponse {}

service TracepointConfigService {
  rpc LoadTracepoints(LoadTracepointRequest) returns (LoadTracepointResponse) {};
  rpc CreateTracepoint(CreateTracepointRequest) returns (CreateTracepointResponse) {};
  rpc DeleteTracepoint(DeleteTracepointRequest) returns (DeleteTracepointResponse) {};
  rpc ExecuteDeepQl(DeepQlRequest) returns (DeepQlResponse) {}
}

message DeepQlRequest {
  string query = 1;
}

message DeepQlResponse {
  repeated deeppb.tracepoint.v1.TracePointConfig all = 1;
  repeated deeppb.tracepoint.v1.TracePointConfig affected = 2;
  string type = 3;
}

message LoadTracepointRequest {
    optional deeppb.poll.v1.PollRequest request  = 1;
}

message LoadTracepointResponse {
  deeppb.poll.v1.PollResponse response = 1;
}

message CreateTracepointRequest {
  deeppb.tracepoint.v1.TracePointConfig tracepoint = 1;
}

message CreateTracepointResponse {
  deeppb.tracepoint.v1.TracePointConfig created = 1;
}

message DeleteTracepointRequest {
  string tracepointID = 1;
}

message DeleteTracepointResponse {
  deeppb.tracepoint.v1.TracePointConfig deleted = 1;

}
