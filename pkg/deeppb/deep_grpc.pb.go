// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: deep.proto

package deeppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuerierServiceClient is the client API for QuerierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuerierServiceClient interface {
	FindSnapshotByID(ctx context.Context, in *SnapshotByIDRequest, opts ...grpc.CallOption) (*SnapshotByIDResponse, error)
	SearchRecent(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchBlock(ctx context.Context, in *SearchBlockRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...grpc.CallOption) (*SearchTagsResponse, error)
	SearchTagValues(ctx context.Context, in *SearchTagValuesRequest, opts ...grpc.CallOption) (*SearchTagValuesResponse, error)
	SearchTagValuesV2(ctx context.Context, in *SearchTagValuesRequest, opts ...grpc.CallOption) (*SearchTagValuesV2Response, error)
}

type querierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuerierServiceClient(cc grpc.ClientConnInterface) QuerierServiceClient {
	return &querierServiceClient{cc}
}

func (c *querierServiceClient) FindSnapshotByID(ctx context.Context, in *SnapshotByIDRequest, opts ...grpc.CallOption) (*SnapshotByIDResponse, error) {
	out := new(SnapshotByIDResponse)
	err := c.cc.Invoke(ctx, "/deeppb.QuerierService/FindSnapshotByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierServiceClient) SearchRecent(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/deeppb.QuerierService/SearchRecent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierServiceClient) SearchBlock(ctx context.Context, in *SearchBlockRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/deeppb.QuerierService/SearchBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierServiceClient) SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...grpc.CallOption) (*SearchTagsResponse, error) {
	out := new(SearchTagsResponse)
	err := c.cc.Invoke(ctx, "/deeppb.QuerierService/SearchTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierServiceClient) SearchTagValues(ctx context.Context, in *SearchTagValuesRequest, opts ...grpc.CallOption) (*SearchTagValuesResponse, error) {
	out := new(SearchTagValuesResponse)
	err := c.cc.Invoke(ctx, "/deeppb.QuerierService/SearchTagValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierServiceClient) SearchTagValuesV2(ctx context.Context, in *SearchTagValuesRequest, opts ...grpc.CallOption) (*SearchTagValuesV2Response, error) {
	out := new(SearchTagValuesV2Response)
	err := c.cc.Invoke(ctx, "/deeppb.QuerierService/SearchTagValuesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuerierServiceServer is the server API for QuerierService service.
// All implementations must embed UnimplementedQuerierServiceServer
// for forward compatibility
type QuerierServiceServer interface {
	FindSnapshotByID(context.Context, *SnapshotByIDRequest) (*SnapshotByIDResponse, error)
	SearchRecent(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchBlock(context.Context, *SearchBlockRequest) (*SearchResponse, error)
	SearchTags(context.Context, *SearchTagsRequest) (*SearchTagsResponse, error)
	SearchTagValues(context.Context, *SearchTagValuesRequest) (*SearchTagValuesResponse, error)
	SearchTagValuesV2(context.Context, *SearchTagValuesRequest) (*SearchTagValuesV2Response, error)
	mustEmbedUnimplementedQuerierServiceServer()
}

// UnimplementedQuerierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuerierServiceServer struct {
}

func (UnimplementedQuerierServiceServer) FindSnapshotByID(context.Context, *SnapshotByIDRequest) (*SnapshotByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSnapshotByID not implemented")
}
func (UnimplementedQuerierServiceServer) SearchRecent(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecent not implemented")
}
func (UnimplementedQuerierServiceServer) SearchBlock(context.Context, *SearchBlockRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlock not implemented")
}
func (UnimplementedQuerierServiceServer) SearchTags(context.Context, *SearchTagsRequest) (*SearchTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTags not implemented")
}
func (UnimplementedQuerierServiceServer) SearchTagValues(context.Context, *SearchTagValuesRequest) (*SearchTagValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTagValues not implemented")
}
func (UnimplementedQuerierServiceServer) SearchTagValuesV2(context.Context, *SearchTagValuesRequest) (*SearchTagValuesV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTagValuesV2 not implemented")
}
func (UnimplementedQuerierServiceServer) mustEmbedUnimplementedQuerierServiceServer() {}

// UnsafeQuerierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuerierServiceServer will
// result in compilation errors.
type UnsafeQuerierServiceServer interface {
	mustEmbedUnimplementedQuerierServiceServer()
}

func RegisterQuerierServiceServer(s grpc.ServiceRegistrar, srv QuerierServiceServer) {
	s.RegisterService(&QuerierService_ServiceDesc, srv)
}

func _QuerierService_FindSnapshotByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServiceServer).FindSnapshotByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.QuerierService/FindSnapshotByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServiceServer).FindSnapshotByID(ctx, req.(*SnapshotByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuerierService_SearchRecent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServiceServer).SearchRecent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.QuerierService/SearchRecent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServiceServer).SearchRecent(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuerierService_SearchBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServiceServer).SearchBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.QuerierService/SearchBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServiceServer).SearchBlock(ctx, req.(*SearchBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuerierService_SearchTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServiceServer).SearchTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.QuerierService/SearchTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServiceServer).SearchTags(ctx, req.(*SearchTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuerierService_SearchTagValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTagValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServiceServer).SearchTagValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.QuerierService/SearchTagValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServiceServer).SearchTagValues(ctx, req.(*SearchTagValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuerierService_SearchTagValuesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTagValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServiceServer).SearchTagValuesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.QuerierService/SearchTagValuesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServiceServer).SearchTagValuesV2(ctx, req.(*SearchTagValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuerierService_ServiceDesc is the grpc.ServiceDesc for QuerierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuerierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deeppb.QuerierService",
	HandlerType: (*QuerierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSnapshotByID",
			Handler:    _QuerierService_FindSnapshotByID_Handler,
		},
		{
			MethodName: "SearchRecent",
			Handler:    _QuerierService_SearchRecent_Handler,
		},
		{
			MethodName: "SearchBlock",
			Handler:    _QuerierService_SearchBlock_Handler,
		},
		{
			MethodName: "SearchTags",
			Handler:    _QuerierService_SearchTags_Handler,
		},
		{
			MethodName: "SearchTagValues",
			Handler:    _QuerierService_SearchTagValues_Handler,
		},
		{
			MethodName: "SearchTagValuesV2",
			Handler:    _QuerierService_SearchTagValuesV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deep.proto",
}

// MetricsGeneratorClient is the client API for MetricsGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsGeneratorClient interface {
	PushSnapshot(ctx context.Context, in *PushSnapshotRequest, opts ...grpc.CallOption) (*PushSnapshotResponse, error)
}

type metricsGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsGeneratorClient(cc grpc.ClientConnInterface) MetricsGeneratorClient {
	return &metricsGeneratorClient{cc}
}

func (c *metricsGeneratorClient) PushSnapshot(ctx context.Context, in *PushSnapshotRequest, opts ...grpc.CallOption) (*PushSnapshotResponse, error) {
	out := new(PushSnapshotResponse)
	err := c.cc.Invoke(ctx, "/deeppb.MetricsGenerator/PushSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsGeneratorServer is the server API for MetricsGenerator service.
// All implementations must embed UnimplementedMetricsGeneratorServer
// for forward compatibility
type MetricsGeneratorServer interface {
	PushSnapshot(context.Context, *PushSnapshotRequest) (*PushSnapshotResponse, error)
	mustEmbedUnimplementedMetricsGeneratorServer()
}

// UnimplementedMetricsGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsGeneratorServer struct {
}

func (UnimplementedMetricsGeneratorServer) PushSnapshot(context.Context, *PushSnapshotRequest) (*PushSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSnapshot not implemented")
}
func (UnimplementedMetricsGeneratorServer) mustEmbedUnimplementedMetricsGeneratorServer() {}

// UnsafeMetricsGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsGeneratorServer will
// result in compilation errors.
type UnsafeMetricsGeneratorServer interface {
	mustEmbedUnimplementedMetricsGeneratorServer()
}

func RegisterMetricsGeneratorServer(s grpc.ServiceRegistrar, srv MetricsGeneratorServer) {
	s.RegisterService(&MetricsGenerator_ServiceDesc, srv)
}

func _MetricsGenerator_PushSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsGeneratorServer).PushSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.MetricsGenerator/PushSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsGeneratorServer).PushSnapshot(ctx, req.(*PushSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsGenerator_ServiceDesc is the grpc.ServiceDesc for MetricsGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deeppb.MetricsGenerator",
	HandlerType: (*MetricsGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushSnapshot",
			Handler:    _MetricsGenerator_PushSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deep.proto",
}

// IngesterServiceClient is the client API for IngesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngesterServiceClient interface {
	PushBytes(ctx context.Context, in *PushBytesRequest, opts ...grpc.CallOption) (*PushBytesResponse, error)
}

type ingesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngesterServiceClient(cc grpc.ClientConnInterface) IngesterServiceClient {
	return &ingesterServiceClient{cc}
}

func (c *ingesterServiceClient) PushBytes(ctx context.Context, in *PushBytesRequest, opts ...grpc.CallOption) (*PushBytesResponse, error) {
	out := new(PushBytesResponse)
	err := c.cc.Invoke(ctx, "/deeppb.IngesterService/PushBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngesterServiceServer is the server API for IngesterService service.
// All implementations must embed UnimplementedIngesterServiceServer
// for forward compatibility
type IngesterServiceServer interface {
	PushBytes(context.Context, *PushBytesRequest) (*PushBytesResponse, error)
	mustEmbedUnimplementedIngesterServiceServer()
}

// UnimplementedIngesterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngesterServiceServer struct {
}

func (UnimplementedIngesterServiceServer) PushBytes(context.Context, *PushBytesRequest) (*PushBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBytes not implemented")
}
func (UnimplementedIngesterServiceServer) mustEmbedUnimplementedIngesterServiceServer() {}

// UnsafeIngesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngesterServiceServer will
// result in compilation errors.
type UnsafeIngesterServiceServer interface {
	mustEmbedUnimplementedIngesterServiceServer()
}

func RegisterIngesterServiceServer(s grpc.ServiceRegistrar, srv IngesterServiceServer) {
	s.RegisterService(&IngesterService_ServiceDesc, srv)
}

func _IngesterService_PushBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngesterServiceServer).PushBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.IngesterService/PushBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngesterServiceServer).PushBytes(ctx, req.(*PushBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngesterService_ServiceDesc is the grpc.ServiceDesc for IngesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deeppb.IngesterService",
	HandlerType: (*IngesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushBytes",
			Handler:    _IngesterService_PushBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deep.proto",
}

// TracepointConfigServiceClient is the client API for TracepointConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TracepointConfigServiceClient interface {
	LoadTracepoints(ctx context.Context, in *LoadTracepointRequest, opts ...grpc.CallOption) (*LoadTracepointResponse, error)
	CreateTracepoint(ctx context.Context, in *CreateTracepointRequest, opts ...grpc.CallOption) (*CreateTracepointResponse, error)
	DeleteTracepoint(ctx context.Context, in *DeleteTracepointRequest, opts ...grpc.CallOption) (*DeleteTracepointResponse, error)
	ExecuteDeepQl(ctx context.Context, in *DeepQlRequest, opts ...grpc.CallOption) (*DeepQlResponse, error)
}

type tracepointConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTracepointConfigServiceClient(cc grpc.ClientConnInterface) TracepointConfigServiceClient {
	return &tracepointConfigServiceClient{cc}
}

func (c *tracepointConfigServiceClient) LoadTracepoints(ctx context.Context, in *LoadTracepointRequest, opts ...grpc.CallOption) (*LoadTracepointResponse, error) {
	out := new(LoadTracepointResponse)
	err := c.cc.Invoke(ctx, "/deeppb.TracepointConfigService/LoadTracepoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracepointConfigServiceClient) CreateTracepoint(ctx context.Context, in *CreateTracepointRequest, opts ...grpc.CallOption) (*CreateTracepointResponse, error) {
	out := new(CreateTracepointResponse)
	err := c.cc.Invoke(ctx, "/deeppb.TracepointConfigService/CreateTracepoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracepointConfigServiceClient) DeleteTracepoint(ctx context.Context, in *DeleteTracepointRequest, opts ...grpc.CallOption) (*DeleteTracepointResponse, error) {
	out := new(DeleteTracepointResponse)
	err := c.cc.Invoke(ctx, "/deeppb.TracepointConfigService/DeleteTracepoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracepointConfigServiceClient) ExecuteDeepQl(ctx context.Context, in *DeepQlRequest, opts ...grpc.CallOption) (*DeepQlResponse, error) {
	out := new(DeepQlResponse)
	err := c.cc.Invoke(ctx, "/deeppb.TracepointConfigService/ExecuteDeepQl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracepointConfigServiceServer is the server API for TracepointConfigService service.
// All implementations must embed UnimplementedTracepointConfigServiceServer
// for forward compatibility
type TracepointConfigServiceServer interface {
	LoadTracepoints(context.Context, *LoadTracepointRequest) (*LoadTracepointResponse, error)
	CreateTracepoint(context.Context, *CreateTracepointRequest) (*CreateTracepointResponse, error)
	DeleteTracepoint(context.Context, *DeleteTracepointRequest) (*DeleteTracepointResponse, error)
	ExecuteDeepQl(context.Context, *DeepQlRequest) (*DeepQlResponse, error)
	mustEmbedUnimplementedTracepointConfigServiceServer()
}

// UnimplementedTracepointConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTracepointConfigServiceServer struct {
}

func (UnimplementedTracepointConfigServiceServer) LoadTracepoints(context.Context, *LoadTracepointRequest) (*LoadTracepointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTracepoints not implemented")
}
func (UnimplementedTracepointConfigServiceServer) CreateTracepoint(context.Context, *CreateTracepointRequest) (*CreateTracepointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTracepoint not implemented")
}
func (UnimplementedTracepointConfigServiceServer) DeleteTracepoint(context.Context, *DeleteTracepointRequest) (*DeleteTracepointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracepoint not implemented")
}
func (UnimplementedTracepointConfigServiceServer) ExecuteDeepQl(context.Context, *DeepQlRequest) (*DeepQlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDeepQl not implemented")
}
func (UnimplementedTracepointConfigServiceServer) mustEmbedUnimplementedTracepointConfigServiceServer() {
}

// UnsafeTracepointConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TracepointConfigServiceServer will
// result in compilation errors.
type UnsafeTracepointConfigServiceServer interface {
	mustEmbedUnimplementedTracepointConfigServiceServer()
}

func RegisterTracepointConfigServiceServer(s grpc.ServiceRegistrar, srv TracepointConfigServiceServer) {
	s.RegisterService(&TracepointConfigService_ServiceDesc, srv)
}

func _TracepointConfigService_LoadTracepoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTracepointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracepointConfigServiceServer).LoadTracepoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.TracepointConfigService/LoadTracepoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracepointConfigServiceServer).LoadTracepoints(ctx, req.(*LoadTracepointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracepointConfigService_CreateTracepoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTracepointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracepointConfigServiceServer).CreateTracepoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.TracepointConfigService/CreateTracepoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracepointConfigServiceServer).CreateTracepoint(ctx, req.(*CreateTracepointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracepointConfigService_DeleteTracepoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTracepointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracepointConfigServiceServer).DeleteTracepoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.TracepointConfigService/DeleteTracepoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracepointConfigServiceServer).DeleteTracepoint(ctx, req.(*DeleteTracepointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracepointConfigService_ExecuteDeepQl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepQlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracepointConfigServiceServer).ExecuteDeepQl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deeppb.TracepointConfigService/ExecuteDeepQl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracepointConfigServiceServer).ExecuteDeepQl(ctx, req.(*DeepQlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TracepointConfigService_ServiceDesc is the grpc.ServiceDesc for TracepointConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TracepointConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deeppb.TracepointConfigService",
	HandlerType: (*TracepointConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadTracepoints",
			Handler:    _TracepointConfigService_LoadTracepoints_Handler,
		},
		{
			MethodName: "CreateTracepoint",
			Handler:    _TracepointConfigService_CreateTracepoint_Handler,
		},
		{
			MethodName: "DeleteTracepoint",
			Handler:    _TracepointConfigService_DeleteTracepoint_Handler,
		},
		{
			MethodName: "ExecuteDeepQl",
			Handler:    _TracepointConfigService_ExecuteDeepQl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deep.proto",
}
