// Code generated by goyacc -l -o pkg/deepql_old/expr.y.go pkg/deepql_old/expr.y. DO NOT EDIT.
package deepql_old

import __yyfmt__ "fmt"

import (
	"fmt"
	"time"
)

type yySymType struct {
	yys               int
	root              RootExpr
	groupOperation    GroupOperation
	coalesceOperation CoalesceOperation

	trigger trigger
	command command
	options []configOption

	snapshotExpression         SnapshotExpression
	snapshotPipelineExpression SnapshotExpression
	wrappedSnapshotPipeline    Pipeline
	snapshotPipeline           Pipeline
	snapshotFilter             SnapshotFilter
	scalarFilter               ScalarFilter
	scalarFilterOperation      Operator

	scalarPipelineExpressionFilter ScalarFilter
	scalarPipelineExpression       ScalarExpression
	scalarExpression               ScalarExpression
	wrappedScalarPipeline          Pipeline
	scalarPipeline                 Pipeline
	aggregate                      Aggregate

	fieldExpression FieldExpression
	static          Static
	intrinsicField  Attribute
	attributeField  Attribute

	binOp          Operator
	staticInt      int
	staticStr      string
	staticFloat    float64
	staticDuration time.Duration

	operator  Operator
	option    configOption
	fieldName string
}

const IDENTIFIER = 57346
const STRING = 57347
const TRIGGER = 57348
const COMMAND = 57349
const INTEGER = 57350
const FLOAT = 57351
const DURATION = 57352
const DOT = 57353
const OPEN_BRACE = 57354
const CLOSE_BRACE = 57355
const OPEN_PARENS = 57356
const CLOSE_PARENS = 57357
const NIL = 57358
const TRUE = 57359
const FALSE = 57360
const IDURATION = 57361
const NAME = 57362
const RESOURCE_DOT = 57363
const COUNT = 57364
const AVG = 57365
const MAX = 57366
const MIN = 57367
const SUM = 57368
const BY = 57369
const COALESCE = 57370
const END_ATTRIBUTE = 57371
const OPEN_BRACK = 57372
const CLOSE_BRACK = 57373
const PIPE = 57374
const AND = 57375
const OR = 57376
const EQ = 57377
const NEQ = 57378
const LT = 57379
const LTE = 57380
const GT = 57381
const GTE = 57382
const NRE = 57383
const RE = 57384
const DESC = 57385
const TILDE = 57386
const ADD = 57387
const SUB = 57388
const NOT = 57389
const MUL = 57390
const DIV = 57391
const MOD = 57392
const POW = 57393

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"TRIGGER",
	"COMMAND",
	"INTEGER",
	"FLOAT",
	"DURATION",
	"DOT",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_PARENS",
	"CLOSE_PARENS",
	"NIL",
	"TRUE",
	"FALSE",
	"IDURATION",
	"NAME",
	"RESOURCE_DOT",
	"COUNT",
	"AVG",
	"MAX",
	"MIN",
	"SUM",
	"BY",
	"COALESCE",
	"END_ATTRIBUTE",
	"OPEN_BRACK",
	"CLOSE_BRACK",
	"PIPE",
	"AND",
	"OR",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"NRE",
	"RE",
	"DESC",
	"TILDE",
	"ADD",
	"SUB",
	"NOT",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 185,
	15, 59,
	-2, 67,
}

const yyPrivate = 57344

const yyLast = 691

var yyAct = [...]uint8{
	79, 21, 9, 170, 4, 10, 11, 16, 105, 20,
	103, 154, 72, 21, 59, 49, 48, 117, 141, 142,
	52, 143, 144, 145, 154, 121, 34, 50, 14, 143,
	144, 145, 154, 42, 45, 21, 116, 90, 207, 43,
	91, 92, 206, 44, 46, 109, 111, 112, 113, 114,
	212, 162, 108, 34, 123, 67, 68, 75, 69, 70,
	71, 72, 69, 70, 71, 72, 120, 21, 21, 21,
	21, 21, 21, 21, 131, 133, 134, 135, 136, 137,
	138, 122, 125, 126, 127, 128, 129, 130, 67, 68,
	169, 69, 70, 71, 72, 21, 124, 167, 21, 116,
	54, 55, 168, 56, 57, 58, 59, 56, 57, 58,
	59, 35, 38, 167, 66, 173, 117, 36, 21, 97,
	90, 37, 39, 91, 92, 21, 89, 185, 187, 53,
	211, 139, 88, 21, 157, 158, 159, 43, 87, 86,
	168, 44, 46, 85, 163, 164, 165, 166, 155, 156,
	146, 147, 148, 149, 150, 151, 153, 152, 73, 184,
	141, 142, 106, 143, 144, 145, 154, 118, 19, 41,
	110, 107, 21, 36, 49, 213, 172, 37, 39, 52,
	40, 183, 106, 161, 106, 42, 45, 21, 160, 49,
	187, 43, 214, 102, 52, 44, 46, 210, 81, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 155, 156, 146, 147, 148,
	149, 150, 151, 153, 152, 209, 80, 141, 142, 51,
	143, 144, 145, 154, 119, 175, 176, 177, 178, 179,
	180, 182, 181, 155, 156, 146, 147, 148, 149, 150,
	151, 153, 152, 208, 18, 141, 142, 6, 143, 144,
	145, 154, 15, 13, 54, 55, 93, 56, 57, 58,
	59, 155, 156, 146, 147, 148, 149, 150, 151, 153,
	152, 205, 174, 141, 142, 104, 143, 144, 145, 154,
	3, 2, 1, 0, 0, 0, 0, 0, 0, 155,
	156, 146, 147, 148, 149, 150, 151, 153, 152, 188,
	0, 141, 142, 0, 143, 144, 145, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 155, 156, 146,
	147, 148, 149, 150, 151, 153, 152, 0, 0, 141,
	142, 0, 143, 144, 145, 154, 155, 156, 146, 147,
	148, 149, 150, 151, 153, 152, 0, 0, 141, 142,
	0, 143, 144, 145, 154, 146, 147, 148, 149, 150,
	151, 153, 152, 121, 0, 141, 142, 0, 143, 144,
	145, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 61, 62, 63, 64, 65, 0,
	0, 0, 0, 67, 68, 0, 69, 70, 71, 72,
	60, 61, 62, 63, 64, 65, 0, 0, 0, 0,
	67, 68, 0, 69, 70, 71, 72, 60, 61, 62,
	63, 64, 65, 0, 0, 0, 0, 54, 55, 0,
	56, 57, 58, 59, 27, 0, 0, 28, 29, 33,
	83, 0, 74, 76, 0, 32, 30, 31, 82, 27,
	84, 0, 28, 29, 33, 83, 0, 0, 76, 0,
	32, 30, 31, 82, 115, 84, 47, 5, 27, 0,
	0, 28, 29, 33, 0, 77, 78, 124, 0, 32,
	30, 31, 35, 38, 0, 0, 0, 0, 36, 0,
	77, 78, 37, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 98, 99, 100, 101, 27, 0, 0,
	28, 29, 33, 0, 19, 0, 94, 0, 32, 30,
	31, 0, 0, 0, 22, 25, 23, 24, 26, 17,
	95, 27, 7, 8, 28, 29, 33, 0, 19, 0,
	12, 0, 32, 30, 31, 0, 0, 0, 22, 25,
	23, 24, 26, 17, 27, 0, 0, 28, 29, 33,
	0, 19, 0, 186, 0, 32, 30, 31, 0, 0,
	0, 22, 25, 23, 24, 26, 17, 27, 0, 0,
	28, 29, 33, 0, 19, 0, 171, 0, 32, 30,
	31, 0, 0, 0, 22, 25, 23, 24, 26, 17,
	27, 0, 0, 28, 29, 33, 0, 19, 0, 12,
	0, 32, 30, 31, 0, 0, 0, 22, 25, 23,
	24, 26, 17, 27, 0, 0, 28, 29, 33, 0,
	19, 0, 94, 0, 32, 30, 31, 0, 0, 0,
	22, 25, 23, 24, 26, 27, 0, 0, 28, 29,
	33, 0, 0, 0, 132, 0, 32, 30, 31, 0,
	0, 0, 22, 25, 23, 24, 26, 27, 0, 0,
	28, 29, 33, 0, 0, 0, 0, 0, 32, 30,
	31,
}

var yyPact = [...]int16{
	536, -1000, -1000, -1000, -6, 78, -1000, 168, 157, 0,
	-1000, -1000, 605, -1000, 392, -1000, 375, 144, -1000, 439,
	-1000, -1000, 129, 125, 124, 118, 112, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 512, 105, 105, 105, 105, 105,
	180, 158, 156, 156, 156, 156, 156, 459, 84, 152,
	219, 51, 358, 473, 82, 82, 82, 82, 82, 82,
	-1000, -1000, -1000, -1000, -1000, -1000, 650, 650, 650, 650,
	650, 650, 650, 454, -1000, 313, 454, 454, 454, -1000,
	-1000, -1000, -1000, 184, 179, 36, 454, 454, 454, 454,
	0, -1000, -1000, -1000, 628, 76, 134, 582, -1000, -1000,
	134, -1000, -1000, 163, 178, 200, 170, -1000, 146, 98,
	156, -1000, -1000, 98, -1000, -1000, -1000, 512, -1000, -1000,
	-1000, -1000, 55, -1000, 559, 59, 59, -37, -37, -37,
	-37, 43, 650, 14, 14, -39, -39, -39, -39, 294,
	-1000, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 266, -19, -19,
	13, 9, -1000, 238, 210, 182, 115, 152, 10, 35,
	21, 582, -1000, -1000, 672, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 178, -1000, -1000, 559, -15, -1000, -19,
	-19, -40, -40, -40, -27, -27, -27, -27, -27, -27,
	-27, -27, -40, 330, 330, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 292, 291, 290, 8, 10, 285, 282, 6, 266,
	2, 476, 263, 3, 262, 5, 114, 257, 27, 7,
	254, 229, 9, 57, 0, 226, 198,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	5, 5, 6, 4, 4, 11, 11, 11, 11, 11,
	11, 11, 12, 13, 13, 13, 13, 13, 13, 13,
	8, 9, 10, 10, 10, 10, 10, 10, 10, 14,
	14, 15, 16, 16, 16, 16, 16, 16, 17, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 20, 21,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 22,
	22, 22, 22, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 24, 24, 24, 24,
	24, 24, 24, 25, 26, 26, 7, 7, 7, 7,
	7, 7, 7, 7,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 3, 4, 3, 4,
	2, 1, 3, 1, 3, 3, 3, 3, 3, 3,
	3, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 1, 2,
	3, 3, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 3,
	4, 4, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -13, -11, -17, 6, 7, -10,
	-15, -8, 14, -12, -18, -14, -19, 27, -20, 12,
	-22, -24, 22, 24, 25, 23, 26, 5, 8, 9,
	17, 18, 16, 10, 32, 33, 39, 43, 34, 44,
	12, 12, 33, 39, 43, 34, 44, -11, -13, -10,
	-18, -21, -19, -16, 45, 46, 48, 49, 50, 51,
	35, 36, 37, 38, 39, 40, -16, 45, 46, 48,
	49, 50, 51, 14, 13, -23, 14, 46, 47, -24,
	-25, -26, 19, 11, 21, 14, 14, 14, 14, 14,
	-10, -15, -8, -9, 14, 28, -11, 14, -11, -11,
	-11, -11, 13, -5, -6, -4, 4, 13, -5, -10,
	14, -10, -10, -10, -10, 15, 15, 32, 15, 15,
	15, 15, -18, -24, 14, -18, -18, -18, -18, -18,
	-18, -19, 14, -19, -19, -19, -19, -19, -19, -23,
	13, 45, 46, 48, 49, 50, 35, 36, 37, 38,
	39, 40, 42, 41, 51, 33, 34, -23, -23, -23,
	4, 4, 15, -23, -23, -23, -23, -10, -19, 14,
	-13, 14, 13, -5, -7, 35, 36, 37, 38, 39,
	40, 42, 41, 11, 13, -22, 14, -13, 15, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, 15, 29, 29, 15, 15,
	15, 15, 15, -24, -4,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 4, 5, 0, 0, 23,
	24, 25, 0, 21, 0, 38, 0, 0, 57, 0,
	67, 68, 0, 0, 0, 0, 0, 96, 97, 98,
	99, 100, 101, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	42, 43, 44, 45, 46, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 0, 0, 93,
	94, 95, 103, 0, 0, 0, 0, 0, 0, 0,
	26, 27, 28, 29, 0, 0, 16, 0, 17, 18,
	19, 20, 6, 0, 11, 0, 13, 8, 0, 33,
	0, 34, 35, 36, 37, 15, 22, 0, 32, 50,
	58, 60, 48, 49, 0, 51, 52, 53, 54, 55,
	56, 41, 0, 61, 62, 63, 64, 65, 66, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 7, 10, 0, 106, 107, 108, 109, 110,
	111, 112, 113, 0, 9, -2, 0, 0, 30, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 74, 104, 105, 70, 71,
	72, 73, 31, 12, 14,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 10
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).expr = &RootExpr{trigger: &yyDollar[1].trigger}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).expr = &RootExpr{command: &yyDollar[1].command}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].snapshotPipeline)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].snapshotPipelineExpression)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].scalarPipelineExpressionFilter)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.trigger = newTrigger(yyDollar[1].staticStr, nil)
		}
	case 7:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.trigger = newTrigger(yyDollar[1].staticStr, yyDollar[3].options)
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.command = newCommand(yyDollar[1].staticStr, nil)
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.command = newCommand(yyDollar[1].staticStr, yyDollar[3].options)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.options = append(yyDollar[2].options, yyDollar[1].option)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.options = append(yyVAL.options, yyDollar[1].option)
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.option = newConfigOption(yyDollar[2].operator, yyDollar[1].fieldName, yyDollar[3].static)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.fieldName = yyDollar[1].staticStr
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldName = fmt.Sprintf("%s.%s", yyDollar[1].staticStr, yyDollar[3].fieldName)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = yyDollar[2].snapshotPipelineExpression
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotAnd, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotChild, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotDescendant, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotUnion, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotSibling, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.snapshotPipelineExpression = yyDollar[1].wrappedSnapshotPipeline
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.wrappedSnapshotPipeline = yyDollar[2].snapshotPipeline
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.snapshotPipeline = newPipeline(yyDollar[1].snapshotExpression)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.snapshotPipeline = newPipeline(yyDollar[1].scalarFilter)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.snapshotPipeline = newPipeline(yyDollar[1].groupOperation)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].snapshotExpression)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].scalarFilter)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].groupOperation)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].coalesceOperation)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.groupOperation = newGroupOperation(yyDollar[3].fieldExpression)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.coalesceOperation = newCoalesceOperation()
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotExpression = yyDollar[2].snapshotExpression
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotAnd, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotChild, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotDescendant, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotUnion, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotSibling, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.snapshotExpression = yyDollar[1].snapshotFilter
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.snapshotFilter = newSnapshotFilter(NewStaticBool(true))
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.snapshotFilter = newSnapshotFilter(yyDollar[2].fieldExpression)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarFilterOperation = OpEqual
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarFilterOperation = OpNotEqual
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarFilterOperation = OpLess
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarFilterOperation = OpLessEqual
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarFilterOperation = OpGreater
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarFilterOperation = OpGreaterEqual
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].static)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = yyDollar[2].scalarPipelineExpression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpAdd, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpSub, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMult, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpDiv, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMod, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpPower, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarPipelineExpression = yyDollar[1].wrappedScalarPipeline
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.wrappedScalarPipeline = yyDollar[2].scalarPipeline
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].aggregate)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = yyDollar[2].scalarExpression
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = newScalarOperation(OpAdd, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = newScalarOperation(OpSub, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = newScalarOperation(OpMult, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = newScalarOperation(OpDiv, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = newScalarOperation(OpMod, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.scalarExpression = newScalarOperation(OpPower, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarExpression = yyDollar[1].aggregate
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.scalarExpression = yyDollar[1].static
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.aggregate = newAggregate(aggregateCount, nil)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.aggregate = newAggregate(aggregateMax, yyDollar[3].fieldExpression)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.aggregate = newAggregate(aggregateMin, yyDollar[3].fieldExpression)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.aggregate = newAggregate(aggregateAvg, yyDollar[3].fieldExpression)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.aggregate = newAggregate(aggregateSum, yyDollar[3].fieldExpression)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = yyDollar[2].fieldExpression
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAdd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpSub, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMult, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpDiv, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMod, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLess, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLessEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreater, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreaterEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpPower, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAnd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.fieldExpression = newBinaryOperation(OpOr, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.fieldExpression = newUnaryOperation(OpSub, yyDollar[2].fieldExpression)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.fieldExpression = newUnaryOperation(OpNot, yyDollar[2].fieldExpression)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.fieldExpression = yyDollar[1].static
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.fieldExpression = yyDollar[1].intrinsicField
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.fieldExpression = yyDollar[1].attributeField
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticString(yyDollar[1].staticStr)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticInt(yyDollar[1].staticInt)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticFloat(yyDollar[1].staticFloat)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticBool(true)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticBool(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticNil()
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.static = NewStaticDuration(yyDollar[1].staticDuration)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicDuration)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.attributeField = NewAttribute(yyDollar[2].staticStr)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeResource, false, yyDollar[2].staticStr)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpEqual
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpNotEqual
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpLess
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpLessEqual
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpGreater
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpGreaterEqual
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpRegex
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.operator = OpNotRegex
		}
	}
	goto yystack /* stack new state and value */
}
